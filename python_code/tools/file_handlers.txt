import os
import numpy as np

from enum import Enum

class FileExtensions(Enum):
    """
    Hold commonly used file extensions
    """
    SMI='.smi'
    XYZ='.xyz'
    CSV='.csv'
    ZIP='.zip'
    PPT='.ppt'
    CIF='.cif'
    MOL='.mol'
    PDB='.pdb'

def get_filename_list(file_extension):
    """
    The function gets a file extension as input and returns a list of all files in the working directory
    ----------
    Parameters
    ----------
    file_extension : str.
        The wanted file extension like '.csv' or '.ppt'
    --------
    Examples
    --------
    from os import listdir

    all_files_in_dir=listdir()
    print(all_files_in_dir)
        ['0_1106253-mod-mod.xyz', '0_1106253-mod.xyz', '1106253.cif', '1109098.cif', '1_1106253-mod.xyz', 'centered_0_BASCIH.xyz', 'cif_handler.py']
        
    xyz_files_in_dir=get_filename_list('.xyz')
    print(xyz_files_in_dir)
        ['0_1106253-mod-mod.xyz', '0_1106253-mod.xyz', '1_1106253-mod.xyz', 'centered_0_BASCIH.xyz']
    
    cif_files_in_dir=get_filename_list('.cif')
    print(cif_files_in_dir)
        ['1106253.cif', '1109098.cif']    
    """
    from os import listdir
    return [filename for filename in listdir() if filename.endswith(file_extension)]    

def get_file_lines(filename, encoding=None):
    """
    The function gets a file name/file location and return the raw text lines of the file as a list
    ----------
    Parameters
    ----------
    filename : str.
        The wanted file name or location like '1109098.cif' or r'C:\Users\itaro\OneDrive\Desktop\itamar\my_ppt.ppt'

    encoding : str. default None
        The encoding format like 'utf-8'. Passed to the python native function 'open'
    --------
    Examples
    --------
    filename='0_1106253-mod.xyz'
    file_lines=get_file_lines(filename)
    print(file_lines)
    ['40\n', 'comment_line\n', 'C     1.56000000    0.24705000   -0.67600000\n', ...]
    """
    with open(filename, 'r', encoding=encoding) as my_file:
        lines=my_file.readlines()
    return lines

def get_file_striped_lines(filename, encoding=None):
    """
    The function gets a file name/location and return the stripped text lines of the file as a list
    ----------
    Parameters
    ----------
    filename : str.
        The wanted file name or location like '1109098.cif' or r'C:\Users\itaro\OneDrive\Desktop\itamar\my_ppt.ppt'

    encoding : str. default None
        The encoding format like 'utf-8'. Passed to the python native function 'open'
    --------
    Examples
    --------
    filename='0_1106253-mod.xyz'
    file_lines=get_file_lines(filename)
    print(file_lines)   
        ['40\n', 'comment_line\n', 'C     1.56000000    0.24705000   -0.67600000\n', ...]

    striped_file_lines=get_file_striped_lines(filename)
    print(striped_file_lines)
        ['40', 'comment_line', 'C     1.56000000    0.24705000   -0.67600000'
    """
    lines=get_file_lines(filename, encoding)
    strip_lines=[line.strip().rstrip('\n') for line in lines]
    return strip_lines


def change_filename(old_filename, new_filename):
    """
    A wrapper function for the os.rename function. The function get a file name and a new file name, and renames the file
    Parameters
    ----------
    filename : str.
        The wanted file name or location like '1109098.cif' or r'C:\Users\itaro\OneDrive\Desktop\itamar\my_ppt.ppt'

    encoding : str. default None
        The encoding format like 'utf-8'. Passed to the python native function 'open'

    Examples
    ----------
    filename='0_1106253-mod.xyz'
    file_lines=get_file_lines(filename)
    print(file_lines)   
    """
    from os import rename
    rename(old_filename, new_filename)

def exchange_file_extension(filename, new_extension):
    return filename.split('.')[0]+new_extension

def save_to_new_zipfile(zip_filename, filenames_to_zip):
    from zipfile import ZipFile
    with ZipFile(zip_filename, 'w', zipfile.ZIP_DEFLATED) as zip_file:
        for filename in filenames_to_zip:
            zip_file.write(filename)   

def get_file_from_zipfile(zip_filename, filename_to_unzip):
    from zipfile import ZipFile
    with ZipFile(zip_filename, 'r', zipfile.ZIP_DEFLATED) as zip_file:
        output_filepath=zip_file.extract(filename_to_unzip)
    return output_filepath

def save_single_xyz_file(symbols, coordinates, output_filename, comment_line='comment_line'):
    with open(output_filename, 'w') as my_file:
        my_file.write('{}\n'.format(len(symbols)))
        my_file.write(comment_line+'\n')
        for loop_index, (x, y, z) in enumerate(coordinates):
            my_file.write('{}\t {:.3f}\t {:.3f}\t {:.3f}\t\n'.format(symbols[loop_index], x, y, z))

def load_single_xyz_file(xyz_filename):
    xyz_file=np.genfromtxt(fname=xyz_filename, skip_header=2, dtype='unicode')
    symbols=xyz_file[:,0]
    coordinates=(xyz_file[:,1:])
    coordinates=coordinates.astype(float)
    return symbols, coordinates    

def get_xyz_df_from_file(xyz_filename):
        xyz_df=pd.read_csv(xyz_filename,
                           delim_whitespace=True,
                           skiprows=2,
                           names=["element", "x", "y", "z"],
                           error_bad_lines='skip')
        return xyz_df

def extract_single_xyz_file_from_ensamble(ensamble_xyz_file, file_index, output_filename):
    file_lines=get_file_lines(CrestConstants.CREST_OUTPUT_NAME.value)
    number_of_single_molecule_lines=int(file_lines[0].strip())+2
    with open(output_filename, 'w') as f:
        f.writelines(self.file_lines[file_index*number_of_single_molecule_lines:(file_index+1)*number_of_single_molecule_lines])

def diffpy_load_crystal_from_cif(cif_filename):
    from diffpy.structure import loadStructure
    diffpy_structure=loadStructure(cif_filename)
    return diffpy_structure

def diffpy_save_single_xyz_file(diffpy_structure, output_filename):
    diffpy_structure.write(output_filename, format='xyz')

def get_number_of_molecules_from_cif_labels(atom_labels): # ['C_1', 'C_2', ..]
    possible_number=atom_labels[-1].split('_')[-1]
    if possible_number.isdigit():
        return int(possible_number)
    else:
        return 1

def get_indiv_xyz_from_cif(diffpy_structure):
    number_of_molecules=get_number_of_molecules_cif_labels(diffpy_structure.label)
    total_size=len(diffpy_structure.label)
    molecule_atoms, molecule_locations=[], []
    for molecule_number in range(number_of_molecules):
        molecule_indices=slice(molecule_number, total_size, number_of_molecules)
        cif_atoms=diffpy_structure.label[molecule_indices]
        molecule_atoms.append(np.array([re.sub(r'[^A-Z]', '', atom) for atom in cif_atoms]))
        molecule_locations.append(diffpy_structure.xyz_cartn[molecule_indices])
    return molecule_atoms, molecule_locations # lists of the approiate items
#           molecule_atoms=[mol_1_atoms, mol_2_atoms, ...]

def check_for_csd_id_from_cif(cif_filename):
    csd_index=int(cif_filename.split('.')[0])
    from ccdc.search import TextNumericSearch
    searcher=TextNumericSearch()
    searcher.add_ccdc_number(csd_index)
    hits=searcher.search()
    for hit in hits:
        if csd_index==hit.entry.ccdc_number:
            return hit.identifier
    return False    

if __name__=='__main__':
    print('script loaded successfully')
